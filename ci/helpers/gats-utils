
build_nstar() {
  local grreleasedevelopdir="$1"

  pushd "$grreleasedevelopdir"/src/guardian/rundmc/nstar
    make
    mv nstar $GOPATH/bin/
  popd
}

build_mkdirer() {
  local grreleasedevelopdir="$1"
  local target="${GOPATH}/bin"

	(
		cd "$grreleasedevelopdir/src/guardian"
		CGO_ENABLED=0 go build -mod vendor -o "${target}/mkdirer" ./cmd/mkdir
	)
}


build_grootfs() {
  local grreleasedevelopdir="$1"
  local target="${GOPATH}/bin"

  (
    cd "$grreleasedevelopdir"/src/grootfs

    make
    make prefix="${target}" install
  )
}

build_gdn() {
  local grreleasedevelop="$1"
  local target="${GOPATH}/bin"

  (
    cd "${grreleasedevelop}/src/guardian"

    go build -mod vendor -o "${target}/gdn" -tags daemon ./cmd/gdn
    go build -mod vendor -o "${target}/dadoo" ./cmd/dadoo

    cd ./cmd/init

    gcc -static -o init init.c ignore_sigchild.c
    mv init "${target}/init"
  )
}

build_containerd() {
  local grreleasedevelopdir="$1"
  local target="${GOPATH}/bin"

  (
    cd "$grreleasedevelopdir"/src/gopath/src/github.com/containerd/containerd

    BUILDTAGS=no_btrfs make
    mv bin/* "${target}"
  )
}

build_idmapper_binaries() {
  local grreleasedevelopdir="$1"

  (
    cd "${grreleasedevelopdir}/src/idmapper"

    target="$GOPATH/bin"

    go build -mod vendor -o "${target}/newuidmap" ./cmd/newuidmap
    go build -mod vendor -o "${target}/newgidmap" ./cmd/newgidmap
    go build -mod vendor -o "${target}/maximus" ./cmd/maximus
  )
}

setup_dirs() {
  rm -fr $tmpdir
  mkdir $tmpdir
  mount -t tmpfs none $tmpdir

  mkdir $tmpdir/depot
  mkdir $tmpdir/snapshots
  mkdir /opt/grootfs
  mkdir -p /var/lib/grootfs/store /var/lib/grootfs-privileged/store
  mkdir /opt/containerd
}

write_groot_config_file() {
  cat <<EOF > /opt/grootfs/grootfs.yml
---
store: /var/lib/grootfs/store
tardis_bin: $GOPATH/bin/tardis
newuidmap_bin: $GOPATH/bin/newuidmap
newgidmap_bin: $GOPATH/bin/newgidmap
log_level: $LOG_LEVEL

create:
  with_clean: false
  without_mount: false

init:
  store_size_bytes: 51398832128
EOF

  cat <<EOF > /opt/grootfs/grootfs-privileged.yml
---
store: /var/lib/grootfs/store-privileged
tardis_bin: $GOPATH/bin/tardis
newuidmap_bin: $GOPATH/bin/newuidmap
newgidmap_bin: $GOPATH/bin/newgidmap
log_level: $LOG_LEVEL

create:
  with_clean: false
  without_mount: false

init:
  store_size_bytes: 51398832128
EOF
}

setup_groot_stores() {
  permit_device_control
  create_loop_devices 256

  $GOPATH/bin/grootfs \
    --config /opt/grootfs/grootfs.yml \
    init-store \
    --store-size-bytes 2147483648 \
    --uid-mapping=0:4294967294:1 \
    --uid-mapping=1:1:4294967293 \
    --gid-mapping=0:4294967294:1 \
    --gid-mapping=1:1:4294967293

  $GOPATH/bin/grootfs \
    --config /opt/grootfs/grootfs-privileged.yml \
    init-store \
    --store-size-bytes 2147483648
}


write_containerd_config_file() {
  cat <<EOF > /opt/containerd/containerd.yml
root = "/opt/containerd/root"
state = "/opt/containerd/state"
subreaper = true
oom_score = -999
disabled_plugins = [
  "aufs",
  "devmapper",
  "overlayfs",
  "zfs",
  "walking",
  "scheduler",
  "diff-service",
  "images-service",
  "namespaces-service",
  "snapshots-service",
  "diff",
  "healthcheck",
  "images",
  "namespaces",
  "snapshots",
  "version",
  "cri",
  "leases",
  "leases-service",
  "restart",
]

[grpc]
address = "/opt/containerd/containerd.sock"

EOF
}

start_containerd() {
  "${GOPATH}/bin/containerd" -c /opt/containerd/containerd.yml > /opt/containerd/containerd.log 2>&1 &
}

start_gdn_server() {
  local containerdsocket=""
	if [[ "$CONTAINERD_ENABLED" == "true" ]] ; then
			containerdsocket=/opt/containerd/containerd.sock
	fi

  "${GOPATH}/bin/gdn" \
    server \
    --init-bin=$GOPATH/bin/init \
    --dadoo-bin=$GOPATH/bin/dadoo \
    --nstar-bin=$GOPATH/bin/nstar \
    --tar-bin=/opt/static-assets/tar/bin/tar \
    --iptables-bin=/opt/static-assets/iptables/sbin/iptables \
    --iptables-restore-bin=/opt/static-assets/iptables/sbin/iptables-restore \
    --image-plugin=$GOPATH/bin/grootfs \
    --image-plugin-extra-arg=--config \
    --image-plugin-extra-arg=/opt/grootfs/grootfs.yml \
    --privileged-image-plugin=$GOPATH/bin/grootfs \
    --privileged-image-plugin-extra-arg=--config \
    --privileged-image-plugin-extra-arg=/opt/grootfs/grootfs-privileged.yml \
    --containerd-socket="${containerdsocket}" \
    --uid-map-start=1 \
    --uid-map-length=4294967293 \
    --gid-map-start=1 \
    --gid-map-length=4294967293 \
    --depot=$tmpdir/depot \
    --bind-ip=0.0.0.0 \
    --bind-port=7777 \
    --debug-bind-ip=0.0.0.0 \
    --debug-bind-port=17013 \
    --network-pool=10.254.1.0/24 \
    --log-level=$LOG_LEVEL \
		--mkdirer-bin=$GOPATH/bin/mkdirer \
    --default-rootfs=/opt/warden/rootfs.tar &
}

wait_for_gdn_server() {
  for i in {1..5}; do
    curl "${GARDEN_ADDRESS}:${GARDEN_PORT}/ping" && break || sleep 5
  done
}
